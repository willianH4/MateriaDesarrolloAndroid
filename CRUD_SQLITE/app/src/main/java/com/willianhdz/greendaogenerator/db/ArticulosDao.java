package com.willianhdz.greendaogenerator.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ARTICULOS".
*/
public class ArticulosDao extends AbstractDao<Articulos, Integer> {

    public static final String TABLENAME = "ARTICULOS";

    /**
     * Properties of entity Articulos.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Codigo = new Property(0, Integer.class, "codigo", true, "CODIGO");
        public final static Property Descripcion = new Property(1, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property Precio = new Property(2, Double.class, "precio", false, "PRECIO");
    }


    public ArticulosDao(DaoConfig config) {
        super(config);
    }
    
    public ArticulosDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARTICULOS\" (" + //
                "\"CODIGO\" INTEGER PRIMARY KEY ," + // 0: codigo
                "\"DESCRIPCION\" TEXT," + // 1: descripcion
                "\"PRECIO\" REAL);"); // 2: precio
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARTICULOS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Articulos entity) {
        stmt.clearBindings();
 
        Integer codigo = entity.getCodigo();
        if (codigo != null) {
            stmt.bindLong(1, codigo);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(2, descripcion);
        }
 
        Double precio = entity.getPrecio();
        if (precio != null) {
            stmt.bindDouble(3, precio);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Articulos entity) {
        stmt.clearBindings();
 
        Integer codigo = entity.getCodigo();
        if (codigo != null) {
            stmt.bindLong(1, codigo);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(2, descripcion);
        }
 
        Double precio = entity.getPrecio();
        if (precio != null) {
            stmt.bindDouble(3, precio);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    @Override
    public Articulos readEntity(Cursor cursor, int offset) {
        Articulos entity = new Articulos( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // codigo
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // descripcion
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2) // precio
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Articulos entity, int offset) {
        entity.setCodigo(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setDescripcion(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPrecio(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(Articulos entity, long rowId) {
        return entity.getCodigo();
    }
    
    @Override
    public Integer getKey(Articulos entity) {
        if(entity != null) {
            return entity.getCodigo();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Articulos entity) {
        return entity.getCodigo() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
